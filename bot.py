import asyncio
import sqlite3
import logging
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è - –ó–ê–ü–û–õ–ù–ò–¢–ï –°–í–û–ò –î–ê–ù–ù–´–ï!
BOT_TOKEN = "7557745613:AAFTpWsCJ2bZMqD6GDwTynnqA8Nc-mRF1Rs"
ADMIN_IDS = [6646433980]  # –í–∞—à Telegram ID

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(storage=MemoryStorage())

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö SQLite
def init_db():
    conn = sqlite3.connect('bot.db')
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS channels (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            chat_id TEXT UNIQUE,
            name TEXT,
            invite_link TEXT,
            is_private BOOLEAN DEFAULT 0
        )
    ''')
    conn.commit()
    conn.close()

init_db()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞
class AddChannel(StatesGroup):
    waiting_chat_id = State()
    waiting_invite_link = State()

# ===== –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´ =====
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer(
        "ü§ñ –Ø –±–æ—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫!\n"
        "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: /stats\n"
        "‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å: /admin"
    )

# ===== –ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–¨ =====
@dp.message(Command("admin"))
async def cmd_admin(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª", callback_data="add_channel")],
        [types.InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª", callback_data="remove_channel")],
        [types.InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")]
    ])
    await message.answer("üë®‚Äçüíª –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=keyboard)

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞
@dp.callback_query(F.data == "add_channel")
async def add_channel_start(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(AddChannel.waiting_chat_id)
    await callback.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ ID –∫–∞–Ω–∞–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: -1001234567890):\n"
        "üí° –ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å ID? –î–æ–±–∞–≤—å—Ç–µ @username_to_id_bot –≤ –∫–∞–Ω–∞–ª"
    )

@dp.message(AddChannel.waiting_chat_id)
async def add_channel_chat_id(message: types.Message, state: FSMContext):
    await state.update_data(chat_id=message.text)
    await state.set_state(AddChannel.waiting_invite_link)
    await message.answer("–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ:")

@dp.message(AddChannel.waiting_invite_link)
async def add_channel_finish(message: types.Message, state: FSMContext):
    data = await state.get_data()
    
    conn = sqlite3.connect('bot.db')
    cursor = conn.cursor()
    try:
        cursor.execute(
            "INSERT INTO channels (chat_id, invite_link) VALUES (?, ?)",
            (data['chat_id'], message.text)
        )
        conn.commit()
        await message.answer("‚úÖ –ö–∞–Ω–∞–ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
    except sqlite3.IntegrityError:
        await message.answer("‚ùå –ö–∞–Ω–∞–ª —Å —Ç–∞–∫–∏–º ID —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
    finally:
        conn.close()
    
    await state.clear()

# –£–¥–∞–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞
@dp.callback_query(F.data == "remove_channel")
async def remove_channel_list(callback: types.CallbackQuery):
    conn = sqlite3.connect('bot.db')
    cursor = conn.cursor()
    cursor.execute("SELECT chat_id, invite_link FROM channels")
    channels = cursor.fetchall()
    conn.close()
    
    if not channels:
        await callback.message.answer("üì≠ –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –ø—É—Å—Ç")
        return
    
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[])
    for chat_id, invite_link in channels:
        keyboard.inline_keyboard.append([
            types.InlineKeyboardButton(
                text=f"‚ùå {invite_link[:20]}...", 
                callback_data=f"delete_{chat_id}"
            )
        ])
    
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=keyboard)

@dp.callback_query(F.data.startswith("delete_"))
async def remove_channel_confirm(callback: types.CallbackQuery):
    chat_id = callback.data.replace("delete_", "")
    
    conn = sqlite3.connect('bot.db')
    cursor = conn.cursor()
    cursor.execute("DELETE FROM channels WHERE chat_id = ?", (chat_id,))
    conn.commit()
    conn.close()
    
    await callback.message.answer("‚úÖ –ö–∞–Ω–∞–ª —É–¥–∞–ª–µ–Ω")
    await callback.answer()

# ===== –ü–†–û–í–ï–†–ö–ê –ü–û–î–ü–ò–°–ö–ò =====
async def check_subscription(user_id: int, channel_chat_id: str) -> bool:
    try:
        chat_member = await bot.get_chat_member(chat_id=channel_chat_id, user_id=user_id)
        return chat_member.status in ['member', 'administrator', 'creator']
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        return False

@dp.message(Command("check"))
async def cmd_check(message: types.Message):
    user_id = message.from_user.id
    
    conn = sqlite3.connect('bot.db')
    cursor = conn.cursor()
    cursor.execute("SELECT chat_id, invite_link FROM channels")
    channels = cursor.fetchall()
    conn.close()
    
    if not channels:
        await message.answer("üì≠ –ö–∞–Ω–∞–ª—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
        return
    
    not_subscribed = []
    for channel_chat_id, invite_link in channels:
        if not await check_subscription(user_id, channel_chat_id):
            not_subscribed.append(invite_link)
    
    if not_subscribed:
        channels_text = "\n".join([f"üîó {link}" for link in not_subscribed])
        await message.answer(
            f"‚ùå –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª—ã:\n\n{channels_text}\n\n"
            f"–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫—É: /check"
        )
    else:
        await message.answer("‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã!")

# ===== –°–¢–ê–¢–ò–°–¢–ò–ö–ê =====
@dp.message(Command("stats"))
async def cmd_stats(message: types.Message):
    conn = sqlite3.connect('bot.db')
    cursor = conn.cursor()
    
    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–Ω–∞–ª–æ–≤
    cursor.execute("SELECT COUNT(*) FROM channels")
    channels_count = cursor.fetchone()[0]
    
    conn.close()
    
    await message.answer(
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:\n"
        f"‚Ä¢ –ö–∞–Ω–∞–ª–æ–≤ –≤ –±–∞–∑–µ: {channels_count}\n"
        f"‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É: /check"
    )

@dp.callback_query(F.data == "admin_stats")
async def admin_stats(callback: types.CallbackQuery):
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    conn = sqlite3.connect('bot.db')
    cursor = conn.cursor()
    cursor.execute("SELECT COUNT(*) FROM channels")
    channels_count = cursor.fetchone()[0]
    conn.close()
    
    await callback.message.answer(
        f"üë®‚Äçüíª –ê–¥–º–∏–Ω —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        f"‚Ä¢ –ö–∞–Ω–∞–ª–æ–≤ –≤ –±–∞–∑–µ: {channels_count}\n"
        f"‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ~ (–Ω–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è)"
    )

# ===== –ó–ê–ü–£–°–ö –ë–û–¢–ê =====
async def main():
    logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
