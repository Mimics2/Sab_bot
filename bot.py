import logging
import sqlite3
import os
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, BotCommand
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes, MessageHandler, filters
from datetime import datetime

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
BOT_TOKEN = os.environ.get("BOT_TOKEN")
ADMIN_ID = int(os.environ.get("ADMIN_ID", "0"))
DB_PATH = "/tmp/bot.db"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
if not BOT_TOKEN:
    logging.error("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    exit(1)

if ADMIN_ID == 0:
    logging.error("‚ùå ADMIN_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!")
    exit(1)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

logger.info(f"‚úÖ –ë–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. ADMIN_ID: {ADMIN_ID}")

class Database:
    def __init__(self, db_path):
        self.db_path = db_path
        self.init_db()

    def get_connection(self):
        return sqlite3.connect(self.db_path)

    def init_db(self):
        conn = self.get_connection()
        cursor = conn.cursor()
        
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                user_id INTEGER PRIMARY KEY,
                username TEXT,
                full_name TEXT,
                joined_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                last_active TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                total_checks INTEGER DEFAULT 0
            )
        ''')
        
        # –ö–∞–Ω–∞–ª—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS subscription_channels (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                channel_username TEXT,
                channel_url TEXT,
                channel_name TEXT,
                channel_type TEXT DEFAULT 'public',
                added_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS confirmed_subscriptions (
                user_id INTEGER,
                channel_id INTEGER,
                confirmed BOOLEAN DEFAULT FALSE,
                confirmed_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                PRIMARY KEY (user_id, channel_id)
            )
        ''')
        
        # –§–∏–Ω–∞–ª—å–Ω—ã–µ –∫–∞–Ω–∞–ª—ã
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS referral_channels (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                channel_url TEXT NOT NULL,
                channel_name TEXT,
                description TEXT,
                added_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–æ–∫
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS user_stats (
                user_id INTEGER,
                check_date DATE,
                check_count INTEGER DEFAULT 0,
                PRIMARY KEY (user_id, check_date)
            )
        ''')
        
        conn.commit()
        conn.close()
        logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω–∞")

    def add_user(self, user_id, username, full_name):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
        try:
            conn = self.get_connection()
            cursor = conn.cursor()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            cursor.execute('SELECT user_id FROM users WHERE user_id = ?', (user_id,))
            existing_user = cursor.fetchone()
            
            if existing_user:
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
                cursor.execute('''
                    UPDATE users 
                    SET last_active = CURRENT_TIMESTAMP, total_checks = total_checks + 1 
                    WHERE user_id = ?
                ''', (user_id,))
                logger.info(f"üìä –û–±–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id} ({username})")
            else:
                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                cursor.execute('''
                    INSERT INTO users (user_id, username, full_name, last_active, total_checks)
                    VALUES (?, ?, ?, CURRENT_TIMESTAMP, 1)
                ''', (user_id, username, full_name))
                logger.info(f"üë§ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id} ({username})")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            cursor.execute('''
                INSERT OR REPLACE INTO user_stats (user_id, check_date, check_count)
                VALUES (?, DATE('now'), COALESCE(
                    (SELECT check_count + 1 FROM user_stats WHERE user_id = ? AND check_date = DATE('now')),
                    1
                ))
            ''', (user_id, user_id))
            
            conn.commit()
            conn.close()
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            return False

    def get_user_stats(self, user_id):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            conn = self.get_connection()
            cursor = conn.cursor()
            cursor.execute('''
                SELECT total_checks, joined_date, last_active 
                FROM users WHERE user_id = ?
            ''', (user_id,))
            result = cursor.fetchone()
            conn.close()
            return result
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return None

    def get_all_users_count(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        try:
            conn = self.get_connection()
            cursor = conn.cursor()
            cursor.execute('SELECT COUNT(*) FROM users')
            result = cursor.fetchone()[0]
            conn.close()
            return result
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
            return 0

    def get_today_stats(self):
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è"""
        try:
            conn = self.get_connection()
            cursor = conn.cursor()
            cursor.execute('''
                SELECT COUNT(*) FROM user_stats WHERE check_date = DATE('now')
            ''')
            today_checks = cursor.fetchone()[0]
            
            cursor.execute('''
                SELECT COUNT(*) FROM users WHERE DATE(joined_date) = DATE('now')
            ''')
            today_new = cursor.fetchone()[0]
            
            conn.close()
            return today_checks, today_new
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return 0, 0

    # –û—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π (add_subscription_channel, confirm_subscription –∏ —Ç.–¥.)
    def add_subscription_channel(self, channel_username, channel_url, channel_name, channel_type='public'):
        try:
            conn = self.get_connection()
            cursor = conn.cursor()
            cursor.execute('INSERT INTO subscription_channels (channel_username, channel_url, channel_name, channel_type) VALUES (?, ?, ?, ?)',
                         (channel_username, channel_url, channel_name, channel_type))
            conn.commit()
            conn.close()
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞: {e}")
            return False

    def get_subscription_channels(self):
        try:
            conn = self.get_connection()
            cursor = conn.cursor()
            cursor.execute('SELECT * FROM subscription_channels ORDER BY id')
            channels = cursor.fetchall()
            conn.close()
            return channels
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤: {e}")
            return []

    def confirm_subscription(self, user_id, channel_id):
        try:
            conn = self.get_connection()
            cursor = conn.cursor()
            cursor.execute('INSERT OR REPLACE INTO confirmed_subscriptions (user_id, channel_id, confirmed) VALUES (?, ?, TRUE)',
                         (user_id, channel_id))
            conn.commit()
            conn.close()
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {e}")
            return False

    def is_subscription_confirmed(self, user_id, channel_id):
        try:
            conn = self.get_connection()
            cursor = conn.cursor()
            cursor.execute('SELECT confirmed FROM confirmed_subscriptions WHERE user_id = ? AND channel_id = ?',
                         (user_id, channel_id))
            result = cursor.fetchone()
            conn.close()
            return result[0] if result else False
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")
            return False

    def remove_subscription_confirmation(self, user_id, channel_id):
        try:
            conn = self.get_connection()
            cursor = conn.cursor()
            cursor.execute('DELETE FROM confirmed_subscriptions WHERE user_id = ? AND channel_id = ?',
                         (user_id, channel_id))
            conn.commit()
            conn.close()
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {e}")
            return False

    def add_referral_channel(self, channel_url, channel_name, description=""):
        try:
            conn = self.get_connection()
            cursor = conn.cursor()
            cursor.execute('INSERT INTO referral_channels (channel_url, channel_name, description) VALUES (?, ?, ?)',
                         (channel_url, channel_name, description))
            conn.commit()
            conn.close()
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞: {e}")
            return False

    def get_referral_channels(self):
        try:
            conn = self.get_connection()
            cursor = conn.cursor()
            cursor.execute('SELECT * FROM referral_channels ORDER BY id')
            channels = cursor.fetchall()
            conn.close()
            return channels
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤: {e}")
            return []

    def remove_subscription_channel(self, channel_id):
        try:
            conn = self.get_connection()
            cursor = conn.cursor()
            cursor.execute('DELETE FROM subscription_channels WHERE id = ?', (channel_id,))
            cursor.execute('DELETE FROM confirmed_subscriptions WHERE channel_id = ?', (channel_id,))
            conn.commit()
            conn.close()
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞: {e}")
            return False

    def remove_referral_channel(self, channel_id):
        try:
            conn = self.get_connection()
            cursor = conn.cursor()
            cursor.execute('DELETE FROM referral_channels WHERE id = ?', (channel_id,))
            conn.commit()
            conn.close()
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞: {e}")
            return False

    def get_all_users(self):
        try:
            conn = self.get_connection()
            cursor = conn.cursor()
            cursor.execute('SELECT user_id, username, full_name, joined_date FROM users ORDER BY joined_date DESC')
            users = cursor.fetchall()
            conn.close()
            return users
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
            return []

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
try:
    db = Database(DB_PATH)
    logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
except Exception as e:
    logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ë–î: {e}")
    db = None

# =============================================
# üé® –ù–û–í–´–ô –î–ò–ó–ê–ô–ù –¢–ï–ö–°–¢–û–í
# =============================================

async def check_subscriptions(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£–ª—É—á—à–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫"""
    user = update.effective_user
    bot = context.bot
    channels = db.get_subscription_channels()
    
    result = {
        "all_subscribed": True,
        "missing_channels": []
    }
    
    if not channels:
        return result
    
    for channel in channels:
        channel_id, channel_username, channel_url, channel_name, channel_type, _ = channel
        
        if channel_type == 'public':
            try:
                if channel_username:
                    clean_username = channel_username.lstrip('@')
                    chat_member = await bot.get_chat_member(f"@{clean_username}", user.id)
                    subscribed = chat_member.status in ['member', 'administrator', 'creator']
                    
                    if not subscribed:
                        result["all_subscribed"] = False
                        result["missing_channels"].append({
                            "id": channel_id,
                            "name": channel_name,
                            "type": "public",
                            "url": f"https://t.me/{clean_username}"
                        })
                else:
                    result["all_subscribed"] = False
                    result["missing_channels"].append({
                        "id": channel_id,
                        "name": channel_name,
                        "type": "public",
                        "url": channel_url
                    })
                    
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ {channel_username}: {e}")
                result["all_subscribed"] = False
                result["missing_channels"].append({
                    "id": channel_id,
                    "name": channel_name,
                    "type": "public",
                    "url": f"https://t.me/{clean_username}" if channel_username else channel_url
                })
        
        elif channel_type == 'private':
            if channel_username:
                try:
                    clean_username = channel_username.lstrip('@')
                    chat_member = await bot.get_chat_member(f"@{clean_username}", user.id)
                    actually_subscribed = chat_member.status in ['member', 'administrator', 'creator']
                    
                    if actually_subscribed:
                        db.confirm_subscription(user.id, channel_id)
                    else:
                        db.remove_subscription_confirmation(user.id, channel_id)
                        result["all_subscribed"] = False
                        result["missing_channels"].append({
                            "id": channel_id,
                            "name": channel_name,
                            "type": "private",
                            "url": channel_url
                        })
                        
                except Exception as e:
                    confirmed = db.is_subscription_confirmed(user.id, channel_id)
                    if not confirmed:
                        result["all_subscribed"] = False
                        result["missing_channels"].append({
                            "id": channel_id,
                            "name": channel_name,
                            "type": "private",
                            "url": channel_url
                        })
            else:
                confirmed = db.is_subscription_confirmed(user.id, channel_id)
                if not confirmed:
                    result["all_subscribed"] = False
                    result["missing_channels"].append({
                        "id": channel_id,
                        "name": channel_name,
                        "type": "private",
                        "url": channel_url
                    })
    
    return result

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """üé™ –ö–†–ê–°–ò–í–û–ï –ü–†–ò–í–ï–¢–°–¢–í–ò–ï"""
    if db is None:
        await update.message.reply_text("üîß –°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return
        
    user = update.effective_user
    
    # –î–æ–±–∞–≤–ª—è–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    success = db.add_user(user.id, user.username, user.full_name)
    
    if not success:
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    # –ö—Ä–∞—Å–∏–≤–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
    welcome_text = f"""
‚ú® *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.first_name}!* ‚ú®

ü§ñ *Premium Access Bot* –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç!

üìã *–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:*
1Ô∏è‚É£ –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–∞–Ω–∞–ª—ã
2Ô∏è‚É£ –ü—Ä–æ–π–¥–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–¥–ø–∏—Å–∫–∏  
3Ô∏è‚É£ –ü–æ–ª—É—á–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –∑–∞–∫—Ä—ã—Ç–æ–º—É –∫–æ–Ω—Ç–µ–Ω—Ç—É

üöÄ *–ù–∞—á–Ω–µ–º –≤–∞—à–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ!*
    """
    
    await update.message.reply_text(welcome_text, parse_mode='Markdown')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫–∏
    subscription_status = await check_subscriptions(update, context)
    
    if subscription_status["all_subscribed"]:
        await show_success_message(update, context)
    else:
        await show_subscription_request(update, context, subscription_status["missing_channels"])

async def show_success_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """üéâ –ö–†–ê–°–ò–í–û–ï –°–û–û–ë–©–ï–ù–ò–ï –û–ë –£–°–ü–ï–•–ï"""
    referral_channels = db.get_referral_channels()
    
    if not referral_channels:
        success_text = """
üéä *–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!* üéä

‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã!

üì¨ *–°–∫–æ—Ä–æ –º—ã –¥–æ–±–∞–≤–∏–º —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –≤–∞—Å!*

üîÑ –î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /check
        """
        if update.callback_query:
            await update.callback_query.edit_message_text(success_text, parse_mode='Markdown')
        else:
            await update.message.reply_text(success_text, parse_mode='Markdown')
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—É—é —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
    channel = referral_channels[0]
    channel_id, channel_url, channel_name, description, _ = channel
    
    success_text = f"""
üéâ *–î–û–°–¢–£–ü –û–¢–ö–†–´–¢!* üéâ

‚ú® *–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø–æ–ª—É—á–∏–ª–∏ –¥–æ—Å—Ç—É–ø –∫ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω–æ–º—É –∫–æ–Ω—Ç–µ–Ω—Ç—É!*

üíé *–í–∞—à —ç–∫—Å–∫–ª—é–∑–∏–≤:*
*{channel_name}*

üìù *–û–ø–∏—Å–∞–Ω–∏–µ:*
{description or '–ü—Ä–µ–º–∏—É–º –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö'}

üîó *–í–∞—à–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:*
`{channel_url}`

‚ö° *–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞*
    """
    
    keyboard = [
        [InlineKeyboardButton(f"üöÄ –ü–µ—Ä–µ–π—Ç–∏ –≤ {channel_name}", url=channel_url)],
        [InlineKeyboardButton("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_subs")],
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="user_stats")]
    ]
    
    if update.effective_user.id == ADMIN_ID:
        keyboard.append([InlineKeyboardButton("‚öôÔ∏è –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è", callback_data="admin_panel")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if update.callback_query:
        await update.callback_query.edit_message_text(success_text, reply_markup=reply_markup, parse_mode='Markdown')
    else:
        await update.message.reply_text(success_text, reply_markup=reply_markup, parse_mode='Markdown')

async def show_subscription_request(update: Update, context: ContextTypes.DEFAULT_TYPE, missing_channels=None):
    """üìã –ö–†–ê–°–ò–í–´–ô –ó–ê–ü–†–û–° –ù–ê –ü–û–î–ü–ò–°–ö–£"""
    keyboard = []
    
    # –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Å–∏–≤—ã–µ –∫–Ω–æ–ø–∫–∏
    for channel_info in missing_channels:
        if channel_info["type"] == "public":
            keyboard.append([
                InlineKeyboardButton(
                    f"üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ {channel_info['name']}",
                    url=channel_info["url"]
                )
            ])
        elif channel_info["type"] == "private":
            keyboard.append([
                InlineKeyboardButton(
                    f"üîê –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ {channel_info['name']}",
                    url=channel_info["url"]
                ),
                InlineKeyboardButton(
                    f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å {channel_info['name']}",
                    callback_data=f"confirm_{channel_info['id']}"
                )
            ])
    
    keyboard.append([InlineKeyboardButton("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏", callback_data="check_subs")])
    keyboard.append([InlineKeyboardButton("üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="user_stats")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if missing_channels:
        public_channels = [ch["name"] for ch in missing_channels if ch["type"] == "public"]
        private_channels = [ch["name"] for ch in missing_channels if ch["type"] == "private"]
        
        request_text = "üîí *–î–û–°–¢–£–ü –û–ì–†–ê–ù–ò–ß–ï–ù*\n\n"
        request_text += "üìã *–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ:*\n\n"
        
        if public_channels:
            request_text += "üì¢ *–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª—ã:*\n"
            for channel in public_channels:
                request_text += f"‚Ä¢ {channel}\n"
            request_text += "\n"
        
        if private_channels:
            request_text += "üîê *–í—Å—Ç—É–ø–∏—Ç–µ –≤ –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ –∫–∞–Ω–∞–ª—ã:*\n"
            for channel in private_channels:
                request_text += f"‚Ä¢ {channel}\n"
            request_text += "\n"
            request_text += "_–ü–æ—Å–ª–µ –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å'_ ‚ú®\n"
        
        request_text += "\nüéØ *–ü–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤—Å–µ—Ö —É—Å–ª–æ–≤–∏–π –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ø—Ä–æ–≤–µ—Ä–∫–∏* üëá"
    else:
        request_text = "üìã –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª—ã"
    
    if update.callback_query:
        await update.callback_query.edit_message_text(request_text, reply_markup=reply_markup, parse_mode='Markdown')
    else:
        await update.message.reply_text(request_text, reply_markup=reply_markup, parse_mode='Markdown')

# =============================================
# üÜï –ù–û–í–ê–Ø –ö–û–ú–ê–ù–î–ê: –î–û–ë–ê–í–õ–ï–ù–ò–ï –§–ò–ù–ê–õ–¨–ù–û–ô –°–°–´–õ–ö–ò
# =============================================

async def add_final_link_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏"""
    user = update.effective_user
    
    if user.id != ADMIN_ID:
        await update.message.reply_text("üö´ *–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ*", parse_mode='Markdown')
        return
        
    if not context.args or len(context.args) < 2:
        help_text = """
üìù *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏*

üí° *–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:*
`/add_final "–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞" "–û–ø–∏—Å–∞–Ω–∏–µ" —Å—Å—ã–ª–∫–∞`

‚ú® *–ü—Ä–∏–º–µ—Ä:*
`/add_final "Premium Content" "–≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã" https://t.me/your_channel`

üéØ *–ò–ª–∏ –ø—Ä–æ—Å—Ç–æ:*  
`/add_final "–ú–æ–π –∫–∞–Ω–∞–ª" https://t.me/link`
        """
        await update.message.reply_text(help_text, parse_mode='Markdown')
        return
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
    args = context.args
    channel_name = args[0]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞
    if len(args) == 2:
        # –§–æ—Ä–º–∞—Ç: /add_final "–ù–∞–∑–≤–∞–Ω–∏–µ" —Å—Å—ã–ª–∫–∞
        channel_url = args[1]
        description = ""
    else:
        # –§–æ—Ä–º–∞—Ç: /add_final "–ù–∞–∑–≤–∞–Ω–∏–µ" "–û–ø–∏—Å–∞–Ω–∏–µ" —Å—Å—ã–ª–∫–∞
        description = args[1]
        channel_url = args[2]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Å—Å—ã–ª–∫–∏
    if not (channel_url.startswith('https://t.me/') or channel_url.startswith('t.me/')):
        await update.message.reply_text("‚ùå *–°—Å—ã–ª–∫–∞ –¥–æ–ª–∂–Ω–∞ –≤–µ—Å—Ç–∏ –Ω–∞ Telegram (t.me/...)*", parse_mode='Markdown')
        return
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–Ω–∞–ª
    if db.add_referral_channel(channel_url, channel_name, description):
        success_text = f"""
‚úÖ *–§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!*

üè∑ *–ù–∞–∑–≤–∞–Ω–∏–µ:* {channel_name}
üìù *–û–ø–∏—Å–∞–Ω–∏–µ:* {description or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"}
üîó *–°—Å—ã–ª–∫–∞:* {channel_url}

üéâ *–¢–µ–ø–µ—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±—É–¥—É—Ç –ø–æ–ª—É—á–∞—Ç—å —ç—Ç—É —Å—Å—ã–ª–∫—É –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫!*
        """
        await update.message.reply_text(success_text, parse_mode='Markdown')
    else:
        await update.message.reply_text("‚ùå *–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å—Å—ã–ª–∫–∏*", parse_mode='Markdown')

# =============================================
# üìä –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø
# =============================================

async def show_user_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user = update.effective_user
    stats = db.get_user_stats(user.id)
    
    if not stats:
        stats_text = "üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞*"
    else:
        total_checks, joined_date, last_active = stats
        joined_str = joined_date.split()[0] if joined_date else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        last_active_str = last_active.split()[0] if last_active else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        
        stats_text = f"""
üìä *–í–ê–®–ê –°–¢–ê–¢–ò–°–¢–ò–ö–ê*

üë§ *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:* {user.first_name}
üÜî *ID:* `{user.id}`
üìÖ *–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:* {joined_str}
üïê *–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:* {last_active_str}
üî¢ *–í—Å–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–æ–∫:* {total_checks}

‚ú® *–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞!*
        """
    
    keyboard = [[InlineKeyboardButton("üîÑ –ù–∞–∑–∞–¥", callback_data="check_subs")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if update.callback_query:
        await update.callback_query.edit_message_text(stats_text, reply_markup=reply_markup, parse_mode='Markdown')
    else:
        await update.message.reply_text(stats_text, reply_markup=reply_markup, parse_mode='Markdown')

# =============================================
# üéØ –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–¨
# =============================================

async def show_admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π"""
    if db is None:
        if update.callback_query:
            await update.callback_query.edit_message_text("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
        else:
            await update.message.reply_text("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
        return
        
    total_users = db.get_all_users_count()
    today_checks, today_new = db.get_today_stats()
    sub_channels = db.get_subscription_channels()
    ref_channels = db.get_referral_channels()
    
    admin_text = f"""
‚öôÔ∏è *–ü–ê–ù–ï–õ–¨ –£–ü–†–ê–í–õ–ï–ù–ò–Ø* ‚öôÔ∏è

üìà *–°–¢–ê–¢–ò–°–¢–ò–ö–ê:*
‚Ä¢ üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: *{total_users}*
‚Ä¢ üîÑ –ü—Ä–æ–≤–µ—Ä–æ–∫ —Å–µ–≥–æ–¥–Ω—è: *{today_checks}*
‚Ä¢ üÜï –ù–æ–≤—ã—Ö —Å–µ–≥–æ–¥–Ω—è: *{today_new}*
‚Ä¢ üì∫ –ö–∞–Ω–∞–ª–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏: *{len(sub_channels)}*
‚Ä¢ üíé –§–∏–Ω–∞–ª—å–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤: *{len(ref_channels)}*

üõ† *–î–û–°–¢–£–ü–ù–´–ï –î–ï–ô–°–¢–í–ò–Ø:*
    """
    
    keyboard = [
        [InlineKeyboardButton("üì∫ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏", callback_data="manage_channels")],
        [InlineKeyboardButton("üìä –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="detailed_stats")],
        [InlineKeyboardButton("üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="users_list")],
        [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="check_subs")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if update.callback_query:
        await update.callback_query.edit_message_text(admin_text, reply_markup=reply_markup, parse_mode='Markdown')
    else:
        await update.message.reply_text(admin_text, reply_markup=reply_markup, parse_mode='Markdown')

async def show_detailed_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞"""
    if update.effective_user.id != ADMIN_ID:
        await update.callback_query.answer("üö´ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
        
    total_users = db.get_all_users_count()
    today_checks, today_new = db.get_today_stats()
    all_users = db.get_all_users()
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–æ—Å–ª–µ–¥–Ω–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    recent_users = all_users[:10]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    
    stats_text = f"""
üìä *–î–ï–¢–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê*

üë• *–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:* {total_users}
üîÑ *–ü—Ä–æ–≤–µ—Ä–æ–∫ —Å–µ–≥–æ–¥–Ω—è:* {today_checks}
üÜï *–ù–æ–≤—ã—Ö —Å–µ–≥–æ–¥–Ω—è:* {today_new}

üìã *–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:*
"""
    
    for user in recent_users:
        user_id, username, full_name, joined_date = user
        username_display = f"@{username}" if username else "–ë–µ–∑ username"
        joined_str = joined_date.split()[0] if joined_date else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        stats_text += f"‚Ä¢ {full_name} ({username_display}) - {joined_str}\n"
    
    if not recent_users:
        stats_text += "‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–∫–∞ –Ω–µ—Ç\n"
    
    keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.callback_query.edit_message_text(stats_text, reply_markup=reply_markup, parse_mode='Markdown')

# =============================================
# üé™ –û–ë–ù–û–í–õ–ï–ù–ù–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –ö–ù–û–ü–û–ö
# =============================================

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user = update.effective_user
    
    if query.data == "check_subs":
        db.add_user(user.id, user.username, user.full_name)
        subscription_status = await check_subscriptions(update, context)
        
        if subscription_status["all_subscribed"]:
            await show_success_message(update, context)
        else:
            await show_subscription_request(update, context, subscription_status["missing_channels"])
    
    elif query.data.startswith("confirm_"):
        channel_id = int(query.data.replace("confirm_", ""))
        
        if db.confirm_subscription(user.id, channel_id):
            await query.answer("‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!", show_alert=True)
            subscription_status = await check_subscriptions(update, context)
            
            if subscription_status["all_subscribed"]:
                await show_success_message(update, context)
            else:
                await show_subscription_request(update, context, subscription_status["missing_channels"])
        else:
            await query.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è", show_alert=True)
    
    elif query.data == "admin_panel":
        if user.id == ADMIN_ID:
            await show_admin_panel(update, context)
        else:
            await query.answer("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
    
    elif query.data == "user_stats":
        await show_user_stats(update, context)
    
    elif query.data == "detailed_stats":
        await show_detailed_stats(update, context)

    # ... –æ—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ (manage_channels –∏ —Ç.–¥.) –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    elif query.data == "manage_channels":
        if user.id == ADMIN_ID:
            await show_manage_channels(update, context)
        else:
            await query.answer("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)

    elif query.data == "add_public_channel":
        if user.id == ADMIN_ID:
            context.user_data['awaiting_channel'] = True
            context.user_data['channel_type'] = 'public'
            await query.edit_message_text(
                "‚ûï **–î–æ–±–∞–≤–∏—Ç—å –ø—É–±–ª–∏—á–Ω—ã–π –∫–∞–Ω–∞–ª**\n\n–í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n`@username –ù–∞–∑–≤–∞–Ω–∏–µ`\n\n**–ü—Ä–∏–º–µ—Ä:**\n`@my_channel –ú–æ–π –∫–∞–Ω–∞–ª`",
                parse_mode='Markdown'
            )
        else:
            await query.answer("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)

    elif query.data == "add_private_channel":
        if user.id == ADMIN_ID:
            context.user_data['awaiting_channel'] = True
            context.user_data['channel_type'] = 'private'
            await query.edit_message_text(
                "‚ûï **–î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª –ø–æ —Å—Å—ã–ª–∫–µ**\n\n–í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n`—Å—Å—ã–ª–∫–∞ –ù–∞–∑–≤–∞–Ω–∏–µ`\n\n**–ü—Ä–∏–º–µ—Ä:**\n`https://t.me/my_channel –ú–æ–π –∫–∞–Ω–∞–ª`",
                parse_mode='Markdown'
            )
        else:
            await query.answer("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)

    elif query.data == "add_referral_channel":
        if user.id == ADMIN_ID:
            context.user_data['awaiting_channel'] = True
            context.user_data['channel_type'] = 'referral'
            await query.edit_message_text(
                "üíé **–î–æ–±–∞–≤–∏—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –∫–∞–Ω–∞–ª**\n\n–í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n`—Å—Å—ã–ª–∫–∞ –ù–∞–∑–≤–∞–Ω–∏–µ –û–ø–∏—Å–∞–Ω–∏–µ`\n\n**–ü—Ä–∏–º–µ—Ä:**\n`https://t.me/final_channel –û—Å–Ω–æ–≤–Ω–æ–π –∫–∞–Ω–∞–ª –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç`",
                parse_mode='Markdown'
            )
        else:
            await query.answer("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)

    elif query.data.startswith("delete_sub_"):
        if user.id == ADMIN_ID:
            channel_id = int(query.data.replace("delete_sub_", ""))
            if db.remove_subscription_channel(channel_id):
                await query.edit_message_text("‚úÖ –ö–∞–Ω–∞–ª —É–¥–∞–ª–µ–Ω!")
            else:
                await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏!")
            await show_manage_channels(update, context)
        else:
            await query.answer("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)

    elif query.data.startswith("delete_ref_"):
        if user.id == ADMIN_ID:
            channel_id = int(query.data.replace("delete_ref_", ""))
            if db.remove_referral_channel(channel_id):
                await query.edit_message_text("‚úÖ –ö–∞–Ω–∞–ª —É–¥–∞–ª–µ–Ω!")
            else:
                await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏!")
            await show_manage_channels(update, context)
        else:
            await query.answer("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)

    elif query.data == "back_to_admin":
        if user.id == ADMIN_ID:
            await show_admin_panel(update, context)
        else:
            await query.answer("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)

# =============================================
# üèÉ‚Äç‚ôÇÔ∏è –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò –ó–ê–ü–£–°–ö–ê
# =============================================

async def admin_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id == ADMIN_ID:
        await show_admin_panel(update, context)
    else:
        await update.message.reply_text("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ")

async def check_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏"""
    db.add_user(update.effective_user.id, update.effective_user.username, update.effective_user.full_name)
    subscription_status = await check_subscriptions(update, context)
    
    if subscription_status["all_subscribed"]:
        await show_success_message(update, context)
    else:
        await update.message.reply_text("‚ùå –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–∞–Ω–∞–ª—ã!")
        await show_subscription_request(update, context, subscription_status["missing_channels"])

async def stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    await show_user_stats(update, context)

async def set_commands(application: Application):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞"""
    commands = [
        BotCommand("start", "üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
        BotCommand("check", "üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É"),
        BotCommand("stats", "üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"),
        BotCommand("admin", "‚öôÔ∏è –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"),
        BotCommand("add_final", "üíé –î–æ–±–∞–≤–∏—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É (–∞–¥–º–∏–Ω)")
    ]
    await application.bot.set_my_commands(commands)

def main():
    if db is None:
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö. –ë–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω.")
        return
        
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("check", check_command))
    application.add_handler(CommandHandler("stats", stats_command))
    application.add_handler(CommandHandler("admin", admin_command))
    application.add_handler(CommandHandler("add_final", add_final_link_command))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
    application.add_handler(CallbackQueryHandler(button_handler))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
    application.post_init = set_commands
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    application.run_polling()

if __name__ == "__main__":
    main()
